### YamlMime:Tutorial
title: Buildbenachrichtigungs-Bot mit JavaScript
metadata:
  title: Buildbenachrichtigungs-Bot mit JavaScript
  description: In diesem Lernprogramm erfahren Sie, wie Sie Benachrichtigungen mit JavaScript senden.
  audience: Developer
  level: Beginner
  ms.date: 05/04/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: toolkit/add-capability.md
  nextTutorialTitle: Zurück zum Hinzufügen von Funktionen
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 1b8f34e0106abb6e96fff01b91cb6670af034d87
  ms.sourcegitcommit: 80edf3c964bb47a2ee13f9eda4334ad19e21f331
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/24/2022
  ms.locfileid: "65655287"
items:
- durationInMinutes: 1
  content: >
    Der Benachrichtigungs-Bot sendet proaktiv Nachrichten in Teams Kanal- oder Gruppenchat oder persönlichen Chat. Sie können den Benachrichtigungs-Bot mit einer HTTP-Anforderung auslösen, z. B. Karten oder Texte.


    In diesem Lernprogramm lernen Sie Folgendes:


    - Erstellen eines neuen Benachrichtigungs-Bots mit Teams Toolkit

    - Informationen zur Verzeichnisstruktur Ihrer App

    - So senden Sie mehrere Benachrichtigungen


    Diese schrittweise Anleitung hilft Ihnen beim Erstellen eines Benachrichtigungs-Bots mit Teams Toolkit. Die folgende Ausgabe wird angezeigt:

      :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Triggerausgabe"border="true":::
- title: Voraussetzungen
  durationInMinutes: 1
  content: "\nHier ist eine Liste der Tools, die Sie zum Erstellen und Bereitstellen Ihrer Apps benötigen.\n\n| &nbsp; | Installieren | Für die Verwendung |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | Eine Microsoft Visual Studio Codeerweiterung, die ein Projektgerüst für Ihre App erstellt. Verwenden Sie Version 4.0.0. |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams, mit allen Personen, mit denen Sie zusammenarbeiten, über Apps für Chat, Besprechung, Anruf und alle an einem Ort zusammenzuarbeiten.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-End-JavaScript-Laufzeitumgebung. Verwenden Sie Version 14 oder 16.|\n| &nbsp; | [Microsoft&nbsp; Edge](https://www.microsoft.com/edge) (empfohlen) oder [Google Chrome](https://www.google.com/chrome/) | Ein Browser mit Entwicklertools. |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | JavaScript- oder TypeScript-Buildumgebungen. Verwenden Sie die neueste Version. |\n| &nbsp; | [Microsoft 365](https://developer.microsoft.com/en-us/microsoft-365/dev-program) | Zugriff auf Teams Konto mit den entsprechenden Berechtigungen zum Installieren einer App. |\n\n> [!NOTE]\n> Das Handbuch wird auf Teams Toolkit Version 4.0.0 und Nodejs Version 14 und 16 getestet. Die Schritte in diesem Handbuch funktionieren möglicherweise mit anderen Versionen, die jedoch nicht getestet wurden.\n\n## <a name=\"prepare-development-environment\"></a>Vorbereiten der Entwicklungsumgebung\n\nNachdem Sie die erforderlichen Tools installiert haben, richten Sie die Entwicklungsumgebung ein.\n\n### <a name=\"install-the-teams-toolkit\"></a>Installieren des Teams Toolkits\n\nDas Teams Toolkit vereinfacht den Entwicklungsprozess mit Tools zum Bereitstellen und Bereitstellen von Cloudressourcen für Ihre App, zum Veröffentlichen im Teams Store und vieles mehr. \n \nSie können das Toolkit mit Visual Studio Code oder CLI (Befehlszeilenschnittstelle) `TeamsFx`verwenden.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Öffnen Sie Visual Studio Code, und wählen Sie **Erweiterungen** aus (**STRG+UMSCHALT+X** / **⌘⇧-X** oder **>-Erweiterungen anzeigen**).\n1. Geben Sie im Suchfeld **Teams Toolkit** ein.\n1. Wählen Sie \"**Installieren\"** neben dem Teams Toolkit aus.\n\n :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/teams-toolkit.png\" alt-text=\"Abbildung der Installation der Teams Toolkit-Erweiterung.\" border=\"true\":::\n\n Das Symbol Teams Toolkit wird nach der Installation in der Visual Studio Code-Randleiste angezeigt.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"Die Abbildung zeigt das Teams-Toolkit-Symbol in Visual Studio Code-Randleiste.\" border=\"true\":::\n\nSie finden das Teams Toolkit auch auf dem [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cli)\n\nVerwenden Sie den Paket-Manager, um die `npm` TeamsFx CLI zu installieren:\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nJe nach Konfiguration müssen Sie die CLI möglicherweise installieren `sudo` :\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nEs ist häufiger auf Linux- und macOS-Systemen.\n\nStellen Sie sicher, dass Sie den npm globalen Cache zu Path hinzufügen. Dieser Schritt wird normalerweise als Teil des Node.js-Installationsprogramms ausgeführt.  \n\nSie können die CLI mit dem `teamsfx` Befehl verwenden. Testen Sie, dass der Befehl funktioniert, indem Sie ausführen `teamsfx -h`.\n\n> [!NOTE]\n> Bevor Sie TeamsFx in PowerShell-Terminals ausführen, stellen Sie sicher, dass Sie die **remote signierte** Ausführungsrichtlinie für PowerShell aktivieren.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Einrichten Ihres Teams-Entwicklungsmandanten\n\nEin **Mandant** ist wie ein Raum oder Container, in dem Sie chatten, Dateien freigeben und Besprechungen für Ihre Organisation in Teams ausführen. Sie können die App auch querladen und testen.\n\n### <a name=\"check-for-sideloading-option\"></a>Option \"Auf Querladen überprüfen\"\n\nNachdem Sie die App erstellt haben, müssen Sie die App in Teams laden, ohne sie zu stören. Dies wird als Querladen bezeichnet. Melden Sie sich bei Ihrem Microsoft 365 Konto an, um diese Option anzuzeigen.\n\n > [!NOTE]\n > Das Querladen ist für die Vorschau und das Testen von Apps in Teams lokalen Umgebung erforderlich. Aktivieren Sie das Querladen, um eine Vorschau anzuzeigen und Ihre App lokal in Teams zu testen.\n\nHaben Sie bereits einen Mandanten, und haben Sie den Administratorzugriff? Lassen Sie uns überprüfen, ob Sie es wirklich tun!\n\nSo überprüfen Sie das Querladen von Apps in Teams:\n\n 1. Wählen Sie im Teams-Client **Store** aus.\n 1. Wählen Sie **Verwalten Ihrer Apps** aus.\n 1. Wählen Sie **In App veröffentlichen** aus.\n 1. Suchen Sie nach der Option zum **Hochladen einer benutzerdefinierten App**. Wenn die Option angezeigt wird, ist das Querladen von Apps aktiviert.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"Abbildung zeigt die Option zum Hochladen einer benutzerdefinierten App in Teams.\":::\n\n     > [!NOTE]\n     > Wenden Sie sich an Teams Administrator, wenn Sie nicht die Möglichkeit haben, eine benutzerdefinierte App hochzuladen.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Erstellen eines kostenlosen Teams Entwicklermandanten (optional)\n\nWenn Sie nicht über ein Teams Entwicklerkonto verfügen, können Sie es kostenlos erhalten. Nehmen Sie am Microsoft 365-Entwicklerprogramm teil!\n\n1. Gehen Sie zu [Microsoft 365-Entwicklerprogramm](https://developer.microsoft.com/microsoft-365/dev-program).\n1. Wählen Sie **\"Jetzt teilnehmen\"** aus, und folgen Sie den Anweisungen auf dem Bildschirm.\n1. Wählen Sie auf der Willkommensseite \" **E5-Abonnement einrichten** \" aus.\n1. Richten Sie ein Administratorkonto ein. NachDem Sie fertig sind, wird der folgende Bildschirm angezeigt.\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\" border=\"true\":::\n\n1. Melden Sie sich mit dem neuen Administratorkonto bei Teams an. Jetzt sollten Sie über die **Hochladen einer benutzerdefinierten App-Option** verfügen.\n"
- title: Buildbenachrichtigungs-Bot
  durationInMinutes: 1
  content: "**So erstellen Sie einen Benachrichtigungs-Bot mit Visual Studio Code**\n\n 1. Öffnen Sie Visual Studio Code.\n \n 1. Wählen Sie das Teams-Toolkit-Symbol :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: in der Visual Studio Code-Randleiste aus.\n\n 1. Wählen Sie **Neue Microsoft Teams-App erstellen** aus.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-teams-app.png\" alt-text=\"Ort des Links „Neues Projekt erstellen“ in der Randleiste des Microsoft Teams-Toolkits.\" border=\"true\":::\n\n 1. Wählen Sie **die Option \"Neue Teams App** erstellen\" aus, um eine App mit Teams Toolkit zu erstellen.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/create-new-app.png\" alt-text=\"Der Assistent beginnt mit dem Erstellen eines neuen Projekts\" border=\"true\":::\n\n 1. Stellen Sie sicher, dass **der Benachrichtigungs-Bot** als Die Funktion ausgewählt ist, die Sie in Ihrer App erstellen möchten. \n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-notification-bot.png\" alt-text=\"App-Funktion auswählen\" border=\"true\":::\n\n 1. Wählen Sie **\"HTTP Trigger Restify Server** \" als Trigger aus. \n 1. Wählen Sie **OK** aus.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-trigger.png\" alt-text=\"Screenshot, der zeigt, wie die Programmiersprache ausgewählt wird.\" border=\"true\":::  \n\n 1. Wählen Sie **JavaScript** als Programmiersprache aus.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-script.png\" alt-text=\"Screenshot, der zeigt, wie die Programmiersprache ausgewählt wird.\" border=\"true\":::    \n\n 1. Wählen Sie den Speicherort für den Projektarbeitsbereich aus.\n 1. Wählen **Sie \"Ordner auswählen\" aus**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/select-folder.png\" alt-text=\"Ordner auswählen\" border=\"true\":::\n \n 1. Geben Sie einen geeigneten Namen für Ihre App ein, z. B. mynotificationbot als Anwendungsnamen. \n 1. Drücken Sie die **EINGABETASTE**.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/type-notfication-name.png\" alt-text=\"Screenshot, der zeigt, wo der App-Name eingegeben werden soll.\" border=\"true\":::\n\n    > [!NOTE]\n    > Stellen Sie sicher, dass im Anwendungsnamen nur alphanumerische Zeichen verwendet werden.\n\n     Die Benachrichtigungs-Bot-App wird in wenigen Sekunden erstellt.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/my-notification-bot.png\" alt-text=\"Screenshot der erstellten App.\" border=\"true\":::\n\n 1. Wählen Sie in der Visual Studio Code-Randleiste das Symbol \"**Ausführen und Debuggen**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::\" aus.\n\n 1. Wählen Sie **\"Debug(Edge)\"** oder **\"Debug(Chrome)\"** aus der Dropdownliste aus.\n\n 1. Wählen Sie die Schaltfläche \" **Debuggen starten** \" aus.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/debug-app.png\" alt-text=\"App-Debugging\"border=\"true\"::: \n\n 1. Wählen Sie **Hinzufügen** aus. \n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/my-notification-output.png\" alt-text=\"Meine Benachrichtigungsausgabe1\"border=\"true\":::\n\n 1. Öffnen **Sie Windows PowerShell**.\n\n 1. Führen Sie den Befehl `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` aus.\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png\" alt-text=\"PowerShell-Trigger\"border=\"true\":::   \n\n     Sie erhalten die folgende Ausgabe in Teams:\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png\" alt-text=\"Triggerausgabe\"border=\"true\":::\n\n ## <a name=\"take-tour-of-source-code\"></a>Machen Sie eine Tour durch den Quellcode\n\n Teams Toolkit stellt Komponenten zum Erstellen einer App bereit. Nachdem Sie das Projekt erstellt haben, können Sie die Projektordner und -dateien im **Explorer-Bereich** von Visual Studio Code anzeigen.\n\n :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/folder-structure.png\" alt-text=\"Registerkarte &quot;Struktur&quot;\" border=\"true\":::\n\n Wenn Sie sich für die Verwendung des UI-Frameworks entscheiden, stellt der folgende Beispielvorlagencode ein Gerüst mit React Komponenten bereit.\n\n Der neue Projektordner enthält folgende Inhalte:\n\n | Ordnername | Inhalt |\n | --- | --- |\n | `.fx` | Project Von Einstellungen, Konfiguration und Umgebungsinformationen |\n | `.vscode` | VS-Codedateien für das lokale Debuggen |\n | `bot` | Der Bot-Quellcode |\n | `templates` | Vorlagen für Teams App-Manifest und entsprechende Azure-Ressourcen |\n \n  Die Kern-Benachrichtigungsimplementierung im **Bot-Ordner** und enthält:\n\n | Dateiname | Inhalt |\n | --- | --- |\n | `src/adaptiveCards/` | Vorlagen für adaptive Karten  |\n | `src/internal/` | Generierter Initialisierungscode für Benachrichtigungsfunktionen |\n | `src/index.*s` | Der Einstiegspunkt zum Behandeln von Bot-Nachrichten und Senden von Benachrichtigungen |\n | `.gitignore` | Datei zum Ausschließen lokaler Dateien aus dem Botprojekt |\n | `package.json` | Die NPM-Paketdatei für das Bot-Projekt |\n"
- title: Benachrichtigung an Teams Kanal senden
  durationInMinutes: 1
  content: "**So senden Sie eine Benachrichtigung an Teams Kanal**\n\n1. Wählen Sie in Visual Studio Code unter **EXPLORER** **MYNOTIFICATIONBOT> Bot> src> index.js** aus.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/file-path.png\" alt-text=\"Dateipfad\" border=\"true\":::\n\n   Die folgende Seite wird angezeigt:\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/default-program.png\" alt-text=\"Standardprogramm\" border=\"true\":::\n\n1. Verwenden Sie den folgenden Code danach `for (const target of await bot.notification.installations()) { ` in Visual Studio Code.\n\n     ```bash\n     if (target.type === \"Channel\") {\n       const members = await target.members();\n       await target.sendMessage(\"This is a message to channel: \" + members.length + \" members.\");\n       for (const member of members) {\n         await member.sendMessage(\"This is a message to Member: \" + member.account.email);\n       }\n     }\n     /* \n     ```  \n\n      :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/code-add.png\" alt-text=\"Code hinzufügen\" border=\"true\":::\n\n    **So passen Sie den Speicher an:**\n\n    1. Wählen Sie in Visual Studio Code unter **EXPLORER** **MYNOTIFICATIONBOT> Bot> src> internen> initialize.js** aus.\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/initialize-storage.png\" alt-text=\"Storage Initialisieren\" border=\"true\":::\n    \n       Die folgende Seite wird angezeigt:\n\n        :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/storage-code.png\" alt-text=\"Storage Code\" border=\"true\":::\n\n    1. Aktualisieren Sie den folgenden Code in **initialize.js** Datei, um den Speicher anzupassen.\n\n         ```bash\n         const myStorage = new MyStorage(...);\n\n         // initialize ConversationBot with notification enabled and customized storage\n         const bot = new ConversationBot({\n             // The bot id and password to create BotFrameworkAdapter.\n             // See https://aka.ms/about-bot-adapter to learn more about adapters.\n             adapterConfig: {\n                 appId: process.env.BOT_ID,\n                 appPassword: process.env.BOT_PASSWORD,\n             },\n             // Enable notification\n             notification: {\n                 enabled: true,\n                 storage: myStorage,\n             },\n          });\n         ```  \n    1. Verwenden Sie Ihren eigenen Speicherort anstelle von **MyStorage**.\n\n        > [!NOTE]\n        > Es ist erforderlich, Ihren eigenen Speicher für die Produktionsumgebung zu verwenden. Wenn kein Speicher bereitgestellt wird, wird der standardmäßige lokale Dateispeicher berücksichtigt.\n\n1. Wählen Sie in der Visual Studio Code-Randleiste das Symbol \"**Ausführen und Debuggen**:::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/run-debug-icon.png\":::\" aus.\n\n1. Wählen Sie **\"Debug(Edge)\"** oder **\"Debug(Chrome)\"** aus der Dropdownliste aus.\n\n1. Wählen Sie die Schaltfläche \" **Debuggen starten** \" aus.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/debug-app.png\" alt-text=\"App-Debugging\" border=\"true\":::\n\n    Die folgende Ausgabe wird in Teams angezeigt.\n\n      :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/app-installation.png\" alt-text=\"App-Installation\" border=\"true\":::\n\n1. Wählen Sie in der Dropdownliste \" **Zu einem Team hinzufügen\"** aus.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/app-installation1.png\" alt-text=\"Meine Benachrichtigungsausgabe1\" border=\"true\":::\n\n1. Fügen Sie **im Suchfeld** einen beliebigen **Kanal** hinzu.\n1. Wählen Sie **\"Einen Bot einrichten\" aus**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/setup-bot.png\" alt-text=\"Setup-Bot\" border=\"true\":::\n\n   Der folgende Bildschirm wird angezeigt:\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/channel-notification.png\" alt-text=\"Channe1-Benachrichtigung\" border=\"true\":::\n\n1. Öffnen **Sie Windows PowerShell**.\n\n1. Führen Sie den Befehl `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` aus.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/windows-powershell.png\" alt-text=\"PowerShell-Trigger\"border=\"true\":::   \n\n   Sie erhalten die Benachrichtigung im Teams Kanal:\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/channel-output.png\" alt-text=\"Kanalausgabe\" border=\"true\":::\n\n   Sie erhalten die Benachrichtigung im persönlichen Chat:         \n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/sbs-notification-bot/member-output.png\" alt-text=\"member-output\" border=\"true\":::\n"
- title: Bereitstellen Ihrer ersten Teams-App
  durationInMinutes: 1
  content: "\nSie haben gelernt, Teams App mit Benachrichtigungs-Bot-Funktion zu erstellen und auszuführen. Der letzte Schritt besteht darin, Ihre App in Azure bereitzustellen.\n\nStellen wir nun die erste App mit Benachrichtigungs-Bot-Funktion in Azure mit Teams Toolkit bereit.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Anmelden bei Ihrem Azure-Konto\n\nVerwenden Sie Ihr Konto, um auf das Microsoft Azure Portal zuzugreifen und neue Cloudressourcen zur Unterstützung Ihrer App bereitzustellen.\n\n1. Öffnen Sie Visual Studio Code.\n1. Öffnen Sie den Projektordner, in dem Sie die Benachrichtigungs-Bot-App erstellt haben.\n1. Wählen Sie das Symbol Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: in der Randleiste aus.\n1. Wählen Sie **\"Bei Azure anmelden\"** aus.\n\n    > [!TIP]\n    > Wenn Sie die Azure-Kontoerweiterung installiert haben und dasselbe Konto verwenden, können Sie diesen Schritt überspringen.\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können.\n1. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an.\n1. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden, und kehren Sie zu Visual Studio Code zurück.\n\n    Im Abschnitt **KONTEN** der Randleiste werden die beiden Konten separat angezeigt. Außerdem wird die Anzahl der verwendbaren Azure-Abonnements aufgelistet, die Ihnen zur Verfügung stehen. \n    \n    > [!NOTE]\n    > Stellen Sie sicher, dass Mindestens ein verwendbares Azure-Abonnement verfügbar ist.\n\n    Jetzt können Sie Ihre App in Azure bereitstellen!\n\n## <a name=\"deploy-your-app-to-azure\"></a>Bereitstellen Ihrer App in Azure\n\n  Unter **BEREITSTELLUNG** können Sie die erforderlichen Cloudressourcen bereitstellen, und der Code Ihrer App wird in die erstellten Cloudressourcen kopiert.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Wählen Sie das Teams-Toolkit-Symbol :::image type=\"icon\" source=\"~/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: in der Visual Studio Code-Randleiste aus.\n\n1. Wählen Sie **\"Bereitstellung in der Cloud** \" unter **\"BEREITSTELLUNG**\" aus.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/provision-cloud.png\" alt-text=\"Screenshot der Bereitstellungsbefehle\" border=\"true\":::\n\n1. Wählen Sie eine vorhandene Ressourcengruppe aus, oder erstellen Sie eine neue Ressourcengruppe.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/subscription-cloud.png\" alt-text=\"Screenshot mit Ressourcen für die Bereitstellung\" border=\"true\":::\n\n   > [!NOTE]\n   > Es wird ein Dialogfeld angezeigt, in dem erwähnt wird, dass beim Ausführen von Ressourcen in Azure Kosten anfallen können.\n\n1. Wählen Sie **\"Bereitstellen\" aus**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/provision-confirm.png\" alt-text=\"Screenshot des Bereitstellungsdialogfelds.\" border=\"true\":::\n\n   Der Bereitstellungsprozess erstellt Ressourcen in der Azure-Cloud. Sie können den Fortschritt überwachen, indem Sie die Dialogfelder in der unteren rechten Ecke beobachten.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-provision-success.png\" alt-text=\"Screenshot des Dialogfelds &quot;Bereitstellung abgeschlossen&quot;.\" border=\"true\":::\n\n     Sie haben die Möglichkeit, die bereitgestellten Ressourcen anzuzeigen. Für dieses Lernprogramm müssen Sie keine Ressourcen anzeigen.\n\n1. Wählen Sie \" **In der Cloud bereitstellen** \" unter **\"BEREITSTELLUNG** \" aus, nachdem die Bereitstellung abgeschlossen ist.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-cloud.png\" alt-text=\"Screenshot, der zeigt, wo auf die Bereitstellung in der Cloud geklickt werden soll.\" border=\"true\":::\n\n1. Wählen Sie **Bereitstellen** aus.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/Deploy-confirm.png\" alt-text=\"Bereitstellen zur Bestätigung.\" border=\"true\":::\n\n   Die Bereitstellung dauert einige Zeit. Sie können den Fortschritt in den Dialogfeldern in der unteren rechten Ecke überwachen.\n    \n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/deploy-confirmation-cloud.png\" alt-text=\"Bereitstellungsbestätigung.\" border=\"true\":::\n\n1. Wählen Sie \"**Lokales Debuggen**\" unter **\"UMGEBUNG**\" aus Visual Studio Code aus.\n\n     :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/local-debug.png\" alt-text=\"Lokales Debuggen.\" border=\"true\":::\n\n1. Wählen Sie in der Dropdownliste **\"Debuggen** \" aus.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/debug-cloud.png\" alt-text=\"Lokales Debuggen.\" border=\"true\":::\n\n1. Klicken Sie auf **Hinzufügen**.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/app-cloud-output.png\" alt-text=\"App-Cloudausgabe.\" border=\"true\":::\n\n1. Öffnen **Sie Windows PowerShell**.\n\n1. Führen Sie den Befehl `Invoke-Webrequest -Method POST -URI http://localhost:3978/api/notification` aus.\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/windows-powershell1.png\" alt-text=\"Windows PowerShell\" border=\"true\":::\n\n    Sie erhalten die Benachrichtigung in Teams:\n\n    :::image type=\"content\" source=\"~/assets/images/sbs-notification-bot/cloud-final-output.png\" alt-text=\"Endausgabe der Cloud\" border=\"true\":::\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cli)\n\nIm Terminalfenster:\n\n1. Führen Sie `teamsfx new` die Ausführung aus, um ein neues Projekt zu erstellen.\n\n   ``` bash\n   teamsfx new\n   ```\n\n1. Führen Sie `teamsfx provision` die Ausführung aus, um eine Azure-Ressource zu erstellen.\n\n   ``` bash\n   teamsfx provision\n   ```\n\n1. Führen Sie `teamsfx deploy` die Ausführung aus, um die App bereitzustellen.\n\n   ``` bash\n   teamsfx deploy\n   ```\n\n1. Führen Sie `teamsfx preview` die App aus, um sie auszuführen.\n\n   ``` bash\n   teamsfx preview\n   ```\n\n---\n"
- title: Vollständige Herausforderung
  durationInMinutes: 1
  content: >
    Sind Sie auf so etwas gekommen?

     :::image type="content" source="../msteams-platform/assets/images/sbs-notification-bot/trigger-output.png" alt-text="Triggerausgabe"border="true":::
- content: Sie haben das Lernprogramm zum Erstellen eines Benachrichtigungs-Bots abgeschlossen!
