### YamlMime:Tutorial
title: Erstellen Ihrer ersten Bot-App mit JavaScript
metadata:
  title: Hallo Welt mit JavaScript
  description: In diesem Lernprogramm erfahren Sie, wie Sie Hallo Welt-App mit JavaScript erstellen.
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Zurück zur Übersicht über Erste Schritte
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 60140806976a7957bd2c091d7a86791ab07246c0
  ms.sourcegitcommit: 5070746e736edb4ae77cd3efcb2ab8bb2e5819a0
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 06/16/2022
  ms.locfileid: "66123104"
items:
- durationInMinutes: 1
  content: "Starten Sie Microsoft Teams App-Entwicklung mit Ihrer ersten Teams-App. Sie erstellen eine Bot-App mit Teams. \n\nIhre App verfügt über eine Funktion, die über eine eigene Benutzeroberfläche und UX verfügt:\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"Diagramm, das diese App zeigt, verfügt über drei Features.\" border=\"false\":::\n\n> [!NOTE]\n> In diesem Lernprogramm erstellen Sie eine Bot-App.\n\nIn diesem Lernprogramm lernen Sie Folgendes:\n\n- So richten Sie ein neues Projekt mit Teams Toolkit ein.\n- So erstellen Sie eine Bot-App.\n- So stellen Sie Ihre App bereit.\n"
- title: Voraussetzungen
  durationInMinutes: 1
  content: "\nHier ist eine Liste der Tools, die Sie zum Erstellen und Bereitstellen Ihrer Apps benötigen.\n\n| &nbsp; | Installieren | Zum Benutzen... |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | Eine Microsoft Visual Studio Codeerweiterung, die ein Projektgerüst für Ihre App erstellt. Verwenden Sie version 4.0.0. |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams für die Zusammenarbeit mit allen, mit denen Sie zusammenarbeiten, über Apps für Chats, Besprechungen und Anrufe – alles an einem Ort.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-End-JavaScript-Laufzeitumgebung. Verwenden Sie die neueste Version von v16 LTS.|\n| &nbsp; | [Microsoft&nbsp; Edge](https://www.microsoft.com/edge) (empfohlen) oder [Google Chrome](https://www.google.com/chrome/) | Ein Browser mit Entwicklertools. |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | Build-Umgebungen für JavaScript, TypeScript oder SharePoint Framework (SPFx). Verwenden Sie Version 1.55 oder höher. |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure-Tools für Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) und [Azure CLI](/cli/azure/install-azure-cli) | Azure-Tools für den Zugriff auf gespeicherte Daten oder die Bereitstellung eines cloudbasierten Back-End für Ihre Teams-App in Azure. |\n| &nbsp; | [React Developer Tools für Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) ODER [React Developer Tools für Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | Eine Browser-DevTools-Erweiterung für die Open Source-React JavaScript-Bibliothek. |\n| &nbsp; | [Microsoft Graph-Tester](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph Explorer, ein browserbasiertes Tool, mit dem Sie eine Abfrage aus Microsoft Graph-Daten ausführen können. |\n| &nbsp; | [Entwicklerportal für Teams](https://dev.teams.microsoft.com/) | Webbasiertes Portal zum Konfigurieren, Verwalten und Verteilen Ihrer Teams-App, einschließlich an Ihre Organisation oder den Teams-Store. |\n\n\n> [!TIP]\n> Wenn Sie mit Microsoft Graph-Daten arbeiten, sollten Sie sich über Microsoft Graph Explorer informieren und ein Lesezeichen erstellen. Mit diesem browserbasierten Tool können Sie Microsoft Graph außerhalb einer App abfragen.\n\n\n## <a name=\"prepare-development-environment\"></a>Vorbereiten der Entwicklungsumgebung\n\nNachdem Sie die erforderlichen Tools installiert haben, richten Sie die Entwicklungsumgebung ein.\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Installieren des Teams Toolkits\n\nDas Teams Toolkit vereinfacht den Entwicklungsprozess mit Tools zum Bereitstellen und Bereitstellen von Cloudressourcen für Ihre App, zum Veröffentlichen im Teams Store und vieles mehr. \n \nSie können das Toolkit mit Visual Studio Code oder CLI (Befehlszeilenschnittstelle) `TeamsFx`verwenden.\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Öffnen Sie Visual Studio Code, und wählen Sie die Ansicht \"**Erweiterungen**\" aus (**STRG+UMSCHALT+X** / **⌘⇧-X** oder **Ansicht > Erweiterungen**).\n1. Geben Sie im Suchfeld **Teams Toolkit** ein.\n1. Wählen Sie \"**Installieren\"** neben dem Teams Toolkit aus.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png\" alt-text=\"Abbildung der Installation der Teams Toolkit-Erweiterung.\" border=\"false\":::\n\n Das Symbol Teams Toolkit wird nach der Installation in der Visual Studio Code-Randleiste angezeigt.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"Die Abbildung zeigt das Teams-Toolkit-Symbol in Visual Studio Code-Randleiste.\" border=\"false\":::\n\nSie finden das Teams Toolkit auch auf dem [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cli)\n\nVerwenden Sie den Paket-Manager, um die `npm` TeamsFx CLI zu installieren:\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nJe nach Konfiguration müssen Sie die CLI möglicherweise installieren `sudo` :\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nDiese Bedingung ist auf Linux- und macOS-Systemen häufiger.\n\nStellen Sie sicher, dass Sie den npm globalen Cache zu Path hinzufügen. Dieser Schritt wird normalerweise als Teil des Node.js-Installationsprogramms ausgeführt.  \n\nSie können die CLI mit dem `teamsfx` Befehl verwenden. Stellen Sie sicher, dass der Befehl funktioniert, indem Sie ausführen `teamsfx -h`.\n\n> [!CAUTION]\n> Bevor Sie TeamsFx in PowerShell-Terminals ausführen können, müssen Sie die \"remotesignierte\" Ausführungsrichtlinie für PowerShell aktivieren.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Einrichten Ihres Teams-Entwicklungsmandanten\n\nEin **Mandant** ist wie ein Raum oder ein Container für Ihre Organisation in Teams, in dem Sie chatten, Dateien freigeben und Besprechungen ausführen. In diesem Bereich laden Und testen Sie ihre App. Lassen Sie uns überprüfen, ob Sie bereit sind, mit dem Mandanten zu entwickeln.\n\n### <a name=\"check-for-sideloading-option\"></a>Option \"Auf Querladen überprüfen\"\n\nNachdem Sie die App erstellt haben, müssen Sie ihre App in Teams laden, ohne sie zu verteilen. Dieser Vorgang wird als Querladen bezeichnet. Melden Sie sich bei Ihrem Microsoft 365 Konto an, um diese Option anzuzeigen.\n\n > [!NOTE]\n > Das Querladen ist für die Vorschau und das Testen von Apps in Teams lokalen Umgebung erforderlich. Wenn sie nicht aktiviert ist, können Sie ihre App nicht in Teams lokal in der Vorschau anzeigen und testen.\n\nHaben Sie bereits einen Mandanten, und haben Sie den Administratorzugriff? Lassen Sie uns überprüfen, ob Sie es wirklich tun!\n\nÜberprüfen Sie, ob Sie Apps in Teams querladen können:\n\n 1. Wählen Sie im Teams-Client das **Symbol Store** aus.\n 1. Wählen Sie **Verwalten Ihrer Apps** aus.\n 1. Wählen Sie **In App veröffentlichen** aus.\n 1. Suchen Sie nach der Option zum **Hochladen einer benutzerdefinierten App**. Wenn die Option angezeigt wird, ist das Querladen von Apps aktiviert.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/upload-custom-app.png\" alt-text=\"Abbildung zeigt die Option zum Hochladen einer benutzerdefinierten App in Teams.\":::\n\n     > [!NOTE]\n     > Wenn Sie nicht die Möglichkeit haben, eine benutzerdefinierte App hochzuladen, wenden Sie sich an Ihren Teams Administrator.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Erstellen eines kostenlosen Teams Entwicklermandanten (optional)\n\nWenn Sie nicht über ein Teams Entwicklerkonto verfügen, können Sie es kostenlos erhalten. Nehmen Sie am Microsoft 365-Entwicklerprogramm teil!\n\n1. Gehen Sie zu [Microsoft 365-Entwicklerprogramm](https://developer.microsoft.com/microsoft-365/dev-program).\n1. Wählen Sie **\"Jetzt teilnehmen\"** aus, und folgen Sie den Anweisungen auf dem Bildschirm.\n1. Wählen Sie auf der Willkommensseite \" **E5-Abonnement einrichten\" aus**.\n1. Einrichten Ihres Administratorkontos. NachDem Sie fertig sind, wird der folgende Bildschirm angezeigt.\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\" border=\"true\":::\n\n1. Melden Sie sich mit dem soeben eingerichteten Administratorkonto bei Teams an. Vergewissern Sie sich, dass Sie über die **Hochladen einer benutzerdefinierten App-Option** in Teams verfügen.\n\n## <a name=\"get-a-free-azure-account\"></a>Abrufen eines kostenlosen Azure-Kontos\n\nWenn Sie Ihre App hosten oder auf Ressourcen in Azure zugreifen möchten, müssen Sie über ein Azure-Abonnement verfügen. [Erstellen Sie ein kostenloses Konto](https://azure.microsoft.com/free/) , bevor Sie beginnen.\n\nJetzt haben Sie alle Tools und richten Ihr Konto ein. Als Nächstes richten wir Ihre Entwicklungsumgebung ein und beginnen mit der Erstellung! Wählen Sie zuerst die App aus, die Sie ausführen möchten.\n"
- title: Erstellen eines Projektarbeitsbereichs für Ihre Bot-App
  durationInMinutes: 1
  content: "\nErstellen Wir Ihre erste Bot-App.\n\nDie Bot-Funktion einer Teams-App erstellt einen Chatbot oder einen Unterhaltungs-Bot. Sie verwenden es, um einfache und automatisierte Aufgaben auszuführen, z. B. die Bereitstellung von Kundendienst. Ein Bot spricht mit einem Webdienst und hilft Ihnen bei der Nutzung seiner Angebote. Sie können Wettervorhersagen abrufen, Reservierungen vornehmen oder einen anderen Dienst, der mit einem Unterhaltungs-Bot angeboten wird.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"Diagramm, das diese App zeigt, verfügt über drei Features. Bot ist hervorgehoben.\" border=\"false\":::\n\nDa Sie diese Apps bereits erstellt haben, können Sie ein neues Teams Projekt zum Erstellen der Bot-App einrichten.\n\nIn diesem Lernprogramm lernen Sie Folgendes:\n\n1. [So richten Sie ein neues Bot-Projekt mit Teams Toolkit ein.](#create-your-bot-project-workspace)\n1. [Informationen zur Verzeichnisstruktur Ihres App-Projekts.](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> Derzeit sind Bots in Government Community Cloud (GCC) verfügbar, aber nicht in GCC-High und department of defense (DOD).\n\n## <a name=\"create-your-bot-project-workspace\"></a>Erstellen des Botprojektarbeitsbereichs\n\nWenn die Voraussetzungen erfüllt sind, fangen wir an!\n\n> [!NOTE]\n> Die angezeigte Visual Studio Code-UI stammt von Mac. Es kann je nach Betriebssystem, Teams Toolkit-Version und Umgebung unterschiedlich sein.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Öffnen Sie Visual Studio Code.\n1. Wählen Sie das Teams-Toolkit-Symbol :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: in der Visual Studio Code-Randleiste aus.\n\n1. Wählen Sie **Neue Microsoft Teams-App erstellen** aus.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/create-project.png\" alt-text=\"Ort des Links „Neues Projekt erstellen“ in der Randleiste des Microsoft Teams-Toolkits.\" border=\"false\":::\n\n1. Wählen Sie \"**Neue Teams App** erstellen\" aus, um eine App mit dem Teams Toolkit zu erstellen.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app.png\" alt-text=\"Starten des Assistenten für „Neues Projekt erstellen“\" border=\"false\":::\n\n1. Wählen Sie **\"Bot**\" und dann **\"OK**\" aus.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-capabilities-bot.png\" alt-text=\"Screenshot, der zeigt, wie Ihrer neuen App Funktionen hinzufügt werden können.\" border=\"false\":::\n\n1. Wählen Sie im Abschnitt **\"Programmiersprache\"** **JavaScript** aus.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-bot.png\" alt-text=\"Screenshot, der zeigt, wie die Programmiersprache ausgewählt wird.\" border=\"false\":::\n\n1. Wählen Sie Ihren **Arbeitsbereichsordner** aus, indem Sie den erforderlichen Ordner auswählen.\n\n   :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/select-folder.png\" alt-text=\"Screenshot, der zeigt, wie die Programmiersprache ausgewählt wird.\" border=\"false\":::\n\n1. Geben Sie einen passenden Namen für Ihre App ein, wie z. B. `hellobot`. Stellen Sie sicher, dass der Name Ihrer App alphanumerisch ist. Drücken Sie die **EINGABETASTE**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/enter-name-bot.png\" alt-text=\"Screenshot, der zeigt, wo der App-Name eingegeben werden soll.\" border=\"false\":::\n\n    Ihre Teams-App mit botfunktion wird in wenigen Sekunden erstellt.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"Screenshot der erstellten App.\" border=\"false\":::\n\n    Nachdem Ihre App erstellt wurde, zeigt das Teams Toolkit die folgende Meldung an:\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/preview-project.png\" alt-text=\"Standortmeldung\":::\n    \n    Wählen Sie **\"Lokales Debuggen** \" aus, um eine Vorschau ihres Projekts anzuzeigen.\n    \n<details>\n<summary>Eine kurze Zusammenfassung des Erstellens einer Teams-App.</summary>\nSchauen Sie sich diese kurze Zusammenfassung zum Erstellen einer Teams-App an.\n\n![Erstellen einer Teams-App](~/assets/videos/javascript-bot-app1.gif)\n</details>\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cli)\n\nVerwenden Sie die `teamsfx`-CLI zum Erstellen Ihres ersten Projekts.  Beginnen Sie in dem Ordner, in dem Sie den Projektordner erstellen möchten.\n\n``` bash\nteamsfx new\n```\n\nMithilfe der CLI können Sie eine neue Teams-App erstellen. Die CLI führt Sie durch eine Reihe von Fragen. Jede Frage enthält eine Anleitung zur Beantwortung.\n\nVerwenden Sie beispielsweise die Pfeiltasten, um eine Option auszuwählen. Nachdem Sie die Auswahl treffen, drücken **Sie die EINGABETASTE** , um sie zu bestätigen.\n\n1. Wählen Sie **Neue Microsoft Teams-App erstellen** aus.\n1. Wählen Sie **Bot** aus, und deaktivieren Sie die **Tabulatortaste**.\n1. Wählen Sie **JavaScript** als Programmiersprache aus.\n1. Wählen **Sie die EINGABETASTE** aus, um den Standardarbeitsbereichsordner auszuwählen.\n1. Geben Sie einen passenden Namen für Ihre App ein, wie z. B. `HelloBot`. Der Name der App darf nur aus alphanumerischen Zeichen bestehen.\n\nNachdem Sie alle Fragen beantwortet haben, wird Ihr Projekt erstellt.\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>Machen Sie eine Tour durch den Quellcode der Bot-App\n\nNachdem das Gerüst erstellt wurde, zeigen Sie die Projektverzeichnisse und Dateien im Explorer-Bereich von Visual Studio Code an.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-folder-structure-bot-new.png\" alt-text=\"Neue Registerkarte &quot;hw&quot;\" border=\"true\":::\n\n| Ordnername | Inhalt |\n| --- | --- |\n| `.fx/configs` | Konfigurationsdateien, die Benutzer für die Teams-App anpassen können. |\n| `.fx/configs/config.<envName>.json` | Konfigurationsdatei für jede Umgebung. |\n| `.fx/configs/azure.parameters.<envName>.json` | Parameterdatei für die Azure BICEP-Bereitstellung für jede Umgebung. |\n| `.fx/configs/projectSettings.json` | Globale Projekteinstellungen, die für alle Umgebungen gelten. |\n| `.fx/states` | Bereitstellungsausgabe, die vom Toolkit generiert wird.  Das Toolkit erstellt diesen Ordner, nachdem Sie Ressourcen für Ihre App bereitgestellt haben. |\n| `.fx/states/state.<envName>.json` | Bereitstellen einer Ausgabedatei für jede Umgebung. |\n| `.fx/states/<env>.userdata` | Vertrauliche Benutzerdaten für die Bereitstellungsausgabe für jede Umgebung. |\n| `bot` |  Code für die Bot-Funktion, der zur Laufzeit benötigt wird. |\n| `bot/teamsBot.js` | Haupteinstiegspunkt für die Bot-App. |\n| `templates/appPackage` | App-Manifestvorlagendateien und die App-Symbole, color.png und outline.png. |\n| `templates/appPackage/manifest.template.json` | App-Manifest zum Ausführen der App in der lokalen und Remoteumgebung.  |\n| `templates/azure` | BICEP-Vorlagendateien |\n\n> [!Tip]\n> Machen Sie sich mit Bots außerhalb von Teams vertraut, bevor Sie Ihren ersten Bot in Teams integrieren.\n"
- title: Erstellen und Ausführen Ihrer ersten Bot-App
  durationInMinutes: 1
  content: "\nNachdem Sie Ihren Projektarbeitsbereich mit Teams Toolkit eingerichtet haben, erstellen Sie Ihr Botprojekt. Stellen Sie sicher, dass Sie sich bei Ihrem Microsoft 365-Konto angemeldet haben.\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Melden Sie sich bei Ihrem Microsoft 365-Konto an\n\nVerwenden Sie dieses Konto, um sich bei Teams anzumelden. Wenn Sie einen Mandanten für ein Microsoft 365-Entwicklerprogramm verwenden, ist das Administratorkonto, das Sie bei der Registrierung eingerichtet haben, Ihr Microsoft 365 Konto.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Öffnen Sie Visual Studio Code.\n1. Wählen Sie das Symbol Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: in der Randleiste aus.\n1. Wählen Sie **\"Bei M365 anmelden**\" aus.\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können.\n\n1. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Microsoft 365 Konto an.\n1. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden, und kehren Sie zu Visual Studio Code zurück.\n1. Kehren Sie in Visual Studio Code zu Teams Toolkit zurück.\n\n    Verwenden Sie dieses Konto, um sich bei Teams anzumelden. Wenn Sie einen Mandanten für ein Microsoft 365-Entwicklerprogramm verwenden, ist das Administratorkonto, das Sie bei der Registrierung eingerichtet haben, Ihr Microsoft 365 Konto.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Screenshot, der zeigt, wo Sie sich bei Microsoft 365 und Azure anmelden.\" border=\"false\":::\n\n    Jetzt können Sie die App erstellen und lokal ausführen!\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cline)\n\n1. Melden Sie sich bei Microsoft 365 mit der TeamsFx CLI an:\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n2. Melden Sie sich mit der TeamsFx CLI bei Azure an:\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n    Die Kontoanmeldungen werden zwischen Visual Studio Code und der TeamsFx CLI geteilt.\n\n    Nachdem die Entwicklungsumgebung konfiguriert ist, können Sie Ihre erste Teams-App erstellen, erstellen und bereitstellen.\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>Erstellen und Ausführen Ihrer ersten Bot-App lokal\n\nSo erstellen und führen Sie Ihre App in der lokalen Umgebung aus:\n\n1. Wählen Sie **F5** in Visual Studio Code aus, um Ihre App im Debugmodus auszuführen.\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>Erfahren Sie, was geschieht, wenn Sie Ihre App lokal im Debugger ausführen.</summary>\n\n    Falls Sie sich fragen, wenn Sie **F5** drücken, das Teams Toolkit:\n\n    1. Überprüft alle folgenden Voraussetzungen:\n      - Sie sind mit einem Microsoft 365-Konto angemeldet.\n      - Das Querladen ist für Ihr Microsoft 365-Konto aktiviert.\n      - Unterstützte Node.js Version installiert ist.\n      - NPM-Pakete für die Bot-App werden installiert.\n      - Ngrok ist installiert.\n      - Für die Bot-App erforderlicher Port ist verfügbar.\n\n      > [!NOTE]\n      > Wenn Teams Toolkit eine bestimmte Voraussetzung nicht überprüfen kann, werden Sie aufgefordert, es zu überprüfen.\n\n    2. Startet Ngrok, um einen HTTP-Tunnel zu erstellen.\n    3. Registriert die App in Azure AD und konfiguriert die App.\n    4. Registriert die Bot-App im Bot Framework und konfiguriert die Bot-App.\n    5. Registriert die App im Teams Developer Portal und konfiguriert die App.\n    6. Startet die Bot-App.\n    7. Startet Teams in einem Webbrowser und lädt die Bot-App quer.\n\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"Screenshot, der zeigt, wann F5 zum Debuggen gedrückt wird.\":::\n\n    > [!NOTE]\n    > Wenn Sie die App zum ersten Mal ausführen, werden alle Abhängigkeiten heruntergeladen, und die App wird erstellt. Wenn die Erstellung abgeschlossen ist, wird automatisch ein Browserfenster geöffnet. Dieser Vorgang kann 3-5 Minuten dauern.\n\n    Teams führt Ihre App in einem Webbrowser aus.\n\n1. Melden Sie sich mit Ihrem Microsoft 365 Konto an, wenn Sie dazu aufgefordert werden.\n\n1. Wählen Sie **\"Hinzufügen\"** aus, wenn Sie aufgefordert werden, die App auf Teams auf Ihrem lokalen Computer querzuladen.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"Screenshot, der zeigt, dass der Bot auf Teams Client hinzugefügt wird.\":::\n\n    Jetzt wird der Bot erfolgreich auf Teams ausgeführt! Nachdem die App geladen wurde, wird eine Chatsitzung mit dem Bot geöffnet.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"Screenshot, der zeigt, dass der Bot auf Teams Client ausgeführt wird.\":::\n\n    Sie können eingeben `welcome` , um eine Einführungskarte anzuzeigen, und sie eingeben `learn` , um zur Dokumentation für adaptive Karten und Bot-Befehle zu wechseln.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"Screenshot der Lernkarte im Bot auf Teams Client.\":::       \n\n    Sie können normale Debugaktivitäten ausführen, z. B. Haltepunkte festlegen, wie bei jeder anderen Webanwendung. Öffnen Sie die Datei `bot/teamsBot.js`, und suchen Sie die `onMessage()`-Methode. Legen Sie auf jeden Fall einen Haltepunkt fest. Geben Sie dann Text ein.\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Erfahren Sie, wie Sie Probleme beheben, wenn Ihre App nicht lokal ausgeführt wird.</summary>\n\n  Um Ihre App erfolgreich in Teams auszuführen, stellen Sie sicher, dass Sie das Querladen in Ihrem Teams-Konto aktiviert haben. Weitere Informationen zum Querladen finden Sie im Abschnitt \"Voraussetzungen\".\n\n  > [!IMPORTANT]\n  > Derzeit sind Sideloading-Apps in Government Community Cloud (GCC), GCC-High und DOD verfügbar.\n\n  > [!TIP]\n  > Überprüfen Sie mithilfe des [App-Validierungstools](https://dev.teams.microsoft.com/appvalidation.html), ob Probleme auftreten, bevor Sie Ihre App querladen. Dieses Tool ist im Toolkit enthalten. Beheben Sie die Fehler beim Querladen der App.\n  </details> \n"
- title: Bereitstellen Ihrer ersten Teams-App
  durationInMinutes: 1
  content: "\nSie haben gelernt, Teams App mit Bot-Funktion zu erstellen, zu erstellen und auszuführen. Der letzte Schritt besteht darin, Ihre App in Azure bereitzustellen.\n\nStellen wir nun die erste App mit Bot-Funktion in Azure mit Teams Toolkit bereit.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Anmelden bei Ihrem Azure-Konto\n\nVerwenden Sie dieses Konto, um auf das Microsoft Azure Portal zuzugreifen und neue Cloudressourcen zur Unterstützung Ihrer App bereitzustellen.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Öffnen Sie Visual Studio Code.\n1. Öffnen Sie den Projektordner, in dem Sie die Registerkarten-App erstellt haben.\n1. Wählen Sie das Symbol Teams Toolkit :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: in der Randleiste aus.\n1. Wählen Sie **\"Bei Azure anmelden\"** aus.\n\n    > [!TIP]\n    > Wenn Sie die Azure-Kontoerweiterung installiert haben und dasselbe Konto verwenden, können Sie diesen Schritt überspringen. Verwenden Sie dasselbe Konto wie in anderen Erweiterungen.\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können.\n1. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an.\n1. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden, und kehren Sie zu Visual Studio Code zurück.\n\n    Im Abschnitt **KONTEN** der Randleiste werden die beiden Konten separat angezeigt. Außerdem wird die Anzahl der verwendbaren Azure-Abonnements aufgelistet, die Ihnen zur Verfügung stehen. Stellen Sie sicher, dass Mindestens ein verwendbares Azure-Abonnement verfügbar ist. Wenn nicht, melden Sie sich ab, und verwenden Sie ein anderes Konto.\n\n    Jetzt können Sie Ihre App in Azure bereitstellen!\n\n    Herzlichen Glückwunsch, Sie haben eine Teams App erstellt! \n    Lassen Sie uns nun weitermachen und erfahren, wie Sie eine der Apps mithilfe des Teams Toolkits in Azure bereitstellen.\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cline)\n\n1. Melden Sie sich bei Microsoft 365 mit der TeamsFx CLI an:\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n2. Melden Sie sich mit der TeamsFx CLI bei Azure an:\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n    Die Kontoanmeldungen werden zwischen Visual Studio Code und der TeamsFx CLI geteilt.\n\n    Herzlichen Glückwunsch, Sie haben eine Teams App erstellt! \n    Lassen Sie uns nun weitermachen und erfahren, wie Sie eine der Apps mithilfe des Teams Toolkits in Azure bereitstellen.\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Erfahren Sie, was geschieht, wenn Sie Ihre App in Azure bereitstellen</summary>\n\n  Vor der Bereitstellung wurde die Anwendung lokal ausgeführt:\n\n  * Das Back-End unter Verwendung von **Azure Functions Core Tools** ausgeführt.\n  * Der HTTP-Endpunkt der Anwendung, an dem Microsoft Teams die Anwendung lädt, wird lokal ausgeführt.\n\n  Die Bereitstellung erfolgt in zwei Schritten. Sie stellen die Ressourcen in einem aktiven Azure-Abonnement bereit und stellen dann den Back-End- und Frontend-Code für die Anwendung in Azure bereit oder laden sie hoch.\n\n  * Das Back-End verwendet, sofern konfiguriert, verschiedene Azure-Dienste, einschließlich Azure App Service und Azure Storage.\n  * Die Front-End-Anwendung wird in einem Azure Storage-Konto bereitgestellt, das für statisches Webhosting konfiguriert ist.\n\n  </details>\n"
- title: Herzlichen Glückwunsch!
  durationInMinutes: 1
  content: "\nSie haben es geschafft!\n\nSie haben eine Bot-App erstellt.\n\nNachdem Sie nun gelernt haben, eine einfache App zu erstellen, können Sie mit dem Erstellen komplexerer Apps beginnen. Versuchen Sie zunächst, Ihren vorhandenen Apps Funktionen hinzuzufügen.\n\nSo fügen Sie Ihrer vorhandenen App Funktionen hinzu:\n\n1. Wählen Sie im Abschnitt **\"Entwicklung**\" der Randleiste des Teams Toolkit die Option \"**Features hinzufügen**\" aus.\n\n1. Wählen Sie die Funktion aus, die Sie Ihrer App hinzufügen möchten.\n\nDas ist alles. Teams Toolkit fügt der Verzeichnisstruktur Ihrer App das Gerüst für die neue Funktion hinzu. Befolgen Sie die Verfahren zum Erstellen und Bereitstellen der App, und Ihre App verfügt über mehrere Funktionen. \n\nSie haben das Lernprogramm zum Erstellen von Bots mit JavaScript abgeschlossen."
