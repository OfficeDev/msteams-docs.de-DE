### YamlMime:Tutorial
title: Erstellen Ihrer ersten Bot-App mit JavaScript
metadata:
  title: Hallo Welt mit JavaScript
  description: In diesem Lernmodul erfahren Sie, wie Sie Hallo Welt-App mit JavaScript erstellen, indem Sie ein neues Projekt mit dem Teams-Toolkit einrichten, eine Bot-App erstellen und bereitstellen.
  audience: Developer
  level: Beginner
  ms.date: 10/21/2021
  ms.topic: interactive-tutorial
  nextTutorialHref: ~/get-started/get-started-overview.md
  nextTutorialTitle: Zurück zur Übersicht über die ersten Schritte
  ms.custom: mvc
  ms.localizationpriority: high
  ms.openlocfilehash: 16e4ca53b8c4b111da4c59c07e89d2d399784cb8
  ms.sourcegitcommit: 0e4fcbc5efff4bfa1dbfba1e5467bbfaa6638705
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/28/2022
  ms.locfileid: "68773537"
items:
- durationInMinutes: 1
  content: "Starten Sie die Entwicklung von Microsoft Teams-Apps mit Ihrer ersten Teams-App. Sie erstellen eine Bot-App mit Teams. \n\nIhre App verfügt über eine Funktion, die über eine eigene Benutzeroberfläche und Benutzeroberfläche verfügt:\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/your-helloworld-app.png\" alt-text=\"Diagramm, das zeigt, dass diese App drei Features aufweist.\":::\n\n> [!NOTE]\n> In diesem Tutorial erstellen Sie eine Bot-App.\n\nIn diesem Tutorial erfahren Sie Folgendes:\n\n- Einrichten eines neuen Projekts mit dem Teams-Toolkit.\n- Erstellen einer Bot-App\n- So stellen Sie Ihre App bereit.\n"
- title: Voraussetzungen
  durationInMinutes: 1
  content: "\nHier finden Sie eine Liste der Tools, die Sie zum Erstellen und Bereitstellen Ihrer Apps benötigen.\n\n| &nbsp; | Installieren | Zum Benutzen... |\n| --- | --- | --- |\n| **Required** | &nbsp; | &nbsp; |\n| &nbsp; | [Teams Toolkit](#install-the-teams-toolkit) | Eine Microsoft Visual Studio Code-Erweiterung, die ein Projektgerüst für Ihre App erstellt. Verwenden Sie Version 4.0.0. |\n| &nbsp; | [Microsoft Teams](https://www.microsoft.com/microsoft-teams/download-app) | Microsoft Teams für die Zusammenarbeit mit allen, mit denen Sie zusammenarbeiten, über Apps für Chats, Besprechungen und Anrufe – alles an einem Ort.|\n| &nbsp; | [Node.js](https://nodejs.org/en/download/) | Back-End-JavaScript-Laufzeitumgebung. Verwenden Sie das neueste v16 LTS-Release.|\n| &nbsp; | [Microsoft Edge](https://www.microsoft.com/edge) (empfohlen) oder [Google Chrome](https://www.google.com/chrome/) | Ein Browser mit Entwicklertools. |\n| &nbsp; | [Visual Studio Code](https://code.visualstudio.com/download) | Build-Umgebungen für JavaScript, TypeScript oder SharePoint Framework (SPFx). Verwenden Sie Version 1.55 oder höher. |\n| **Optional** | &nbsp; | &nbsp; |\n| &nbsp; | [Azure Tools für Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) und [Azure CLI](/cli/azure/install-azure-cli) | Azure-Tools für den Zugriff auf gespeicherte Daten oder die Bereitstellung eines cloudbasierten Back-Ends für Ihre Teams-App in Azure. |\n| &nbsp; | [React Developer Tools für Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi) ODER [React Developer Tools für Microsoft&nbsp;Edge](https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil) | Eine DevTools-Browsererweiterung für die Open-Source-React JavaScript-Bibliothek. |\n| &nbsp; | [Microsoft Graph-Tester](https://developer.microsoft.com/graph/graph-explorer) | Microsoft Graph-Explorer, ein browserbasiertes Tool, mit dem Sie eine Abfrage aus Microsoft Graph-Daten ausführen können. |\n| &nbsp; | [Entwicklerportal für Teams](https://dev.teams.microsoft.com/) | Webbasiertes Portal zum Konfigurieren, Verwalten und Verteilen Ihrer Teams-App, einschließlich an Ihre Organisation oder den Teams-Store. |\n\n\n> [!TIP]\n> Wenn Sie mit Microsoft Graph-Daten arbeiten, sollten Sie sich mit dem Microsoft Graph-Explorer vertraut machen und mit einem Lesezeichen versehen. Mit diesem browserbasierten Tool können Sie Microsoft Graph außerhalb einer App abfragen.\n\n\n## <a name=\"prepare-development-environment\"></a>Vorbereiten der Entwicklungsumgebung\n\nNachdem Sie die erforderlichen Tools installiert haben, richten Sie die Entwicklungsumgebung ein.\n\n\n### <a name=\"install-the-teams-toolkit\"></a>Installieren des Teams-Toolkits\n\nDas Teams Toolkit vereinfacht den Entwicklungsprozess mit Tools zum Bereitstellen und Bereitstellen von Cloudressourcen für Ihre App, veröffentlichen sie im Teams Store und vieles mehr. \n \nSie können das Toolkit mit Visual Studio Code oder der CLI (Befehlszeilenschnittstelle) `TeamsFx`verwenden.\n\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Öffnen Sie Visual Studio Code, und wählen Sie die Ansicht **Erweiterungen** aus (**STRG+UMSCHALT+X** / **⌘⇧-X** oder **Ansicht > Erweiterungen**).\n1. Geben Sie im Suchfeld **Teams Toolkit** ein.\n1. Wählen Sie neben dem Teams Toolkit **die Option Installieren** aus.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/install-toolkit-vscodeversion.png\" alt-text=\"Abbildung der Installation der Teams Toolkit-Erweiterung.\":::\n\n Das Symbol \"Teams Toolkit\" wird in der Visual Studio Code-Randleiste angezeigt, nachdem es installiert wurde.\n\n :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/hw-teams-toolkit-sidebar-icon.png\" alt-text=\"Abbildung des Teams-Toolkit-Symbols in der Visual Studio Code-Randleiste.\":::\n\nSie finden das Teams Toolkit auch im [Visual Studio Code Marketplace](https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension).\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cli)\n\nVerwenden Sie den Paket-Manager, um die `npm` TeamsFx-CLI zu installieren:\n\n``` bash\nnpm install -g @microsoft/teamsfx-cli\n```\n\nAbhängig von Ihrer Konfiguration müssen Sie möglicherweise verwenden `sudo` , um die CLI zu installieren:\n\n``` bash\nsudo npm install -g --unsafe-perm @microsoft/teamsfx-cli\n```\n\nDiese Bedingung tritt häufiger auf Linux- und macOS-Systemen auf.\n\nStellen Sie sicher, dass Sie den globalen npm-Cache zu Path hinzufügen. Dieser Schritt wird normalerweise als Teil des Node.js-Installationsprogramms ausgeführt.  \n\nSie können die CLI mit dem `teamsfx` Befehl verwenden. Überprüfen Sie, ob der Befehl funktioniert, indem Sie ausführen `teamsfx -h`.\n\n> [!CAUTION]\n> Bevor Sie TeamsFx in PowerShell-Terminals ausführen können, müssen Sie die Ausführungsrichtlinie \"Remotesigniert\" für PowerShell aktivieren.\n\n---\n\n## <a name=\"set-up-your-teams-development-tenant\"></a>Einrichten Ihres Teams-Entwicklungsmandanten\n\nEin **Mandant** ist wie ein Raum oder ein Container für Ihre Organisation in Teams, in dem Sie chatten, Dateien freigeben und Besprechungen ausführen. Dieser Bereich ist auch der Ort, an dem Sie Ihre App querladen und testen. Lassen Sie uns überprüfen, ob Sie bereit sind, mit dem Mandanten zu entwickeln.\n\n### <a name=\"check-for-sideloading-option\"></a>Option \"Auf Querladen überprüfen\"\n\nNachdem Sie die App erstellt haben, müssen Sie ihre App in Teams laden, ohne sie zu verteilen. Dieser Vorgang wird als Querladen bezeichnet. Melden Sie sich bei Ihrem Microsoft 365-Konto an, um diese Option anzuzeigen.\n\n > [!NOTE]\n > Das Querladen ist für die Vorschau und das Testen von Apps in der lokalen Teams-Umgebung erforderlich. Wenn sie nicht aktiviert ist, können Sie Ihre App in Teams nicht lokal in der Vorschau anzeigen und testen.\n\nVerfügen Sie bereits über einen Mandanten und über Administratorzugriff? Lassen Sie uns überprüfen, ob Sie dies wirklich tun!\n\nÜberprüfen Sie, ob Sie Apps in Teams querladen können:\n\n 1. Wählen Sie im Teams-Client das **Symbol Store** aus.\n 1. Wählen Sie **Verwalten Ihrer Apps** aus.\n 1. Wählen Sie **In App veröffentlichen** aus.\n 1. Suchen Sie nach der Option **Hochladen einer benutzerdefinierten App**. Wenn die Option angezeigt wird, ist das Querladen von Apps aktiviert.\n\n     :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/spfx-custom-new1.png\" alt-text=\"Bot Home\":::\n\n     > [!NOTE]\n     > Wenn Sie keine Möglichkeit haben, eine benutzerdefinierte App hochzuladen, wenden Sie sich an Ihren Teams-Administrator.\n\n### <a name=\"create-a-free-teams-developer-tenant-optional\"></a>Erstellen eines kostenlosen Teams-Entwicklermandanten (optional)\n\nWenn Sie nicht über ein Teams-Entwicklerkonto verfügen, können Sie es kostenlos erhalten. Nehmen Sie am Microsoft 365-Entwicklerprogramm teil!\n\n1. Gehen Sie zu [Microsoft 365-Entwicklerprogramm](https://developer.microsoft.com/microsoft-365/dev-program).\n1. Wählen Sie **Jetzt beitreten** aus, und folgen Sie den Anweisungen auf dem Bildschirm.\n1. Wählen Sie auf der Willkommensseite **E5-Abonnement einrichten** aus.\n1. Einrichten Ihres Administratorkontos. Nachdem Sie fertig sind, wird der folgende Bildschirm angezeigt.\n\n    :::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/prerequisites/microsoft-365.png\" alt-text=\"Microsoft\":::\n\n1. Melden Sie sich bei Teams mit dem Administratorkonto an, das Sie gerade eingerichtet haben. Vergewissern Sie sich, dass Sie über die Option **Benutzerdefinierte App hochladen** in Teams verfügen.\n\n## <a name=\"get-a-free-azure-account\"></a>Abrufen eines kostenlosen Azure-Kontos\n\nWenn Sie Ihre App hosten oder auf Ressourcen in Azure zugreifen möchten, benötigen Sie ein Azure-Abonnement. [Erstellen Sie ein kostenloses Konto](https://azure.microsoft.com/free/) , bevor Sie beginnen.\n\nJetzt verfügen Sie über alle Tools und richten Ihr Konto ein. Richten Sie als Nächstes Ihre Entwicklungsumgebung ein, und beginnen Sie mit dem Erstellen! Wählen Sie zuerst die App aus, die Sie ausführen möchten.\n"
- title: Erstellen eines Projektarbeitsbereichs für Ihre Bot-App
  durationInMinutes: 1
  content: "\nLassen Sie uns Ihre erste Bot-App erstellen.\n\nDie Botfunktion einer Teams-App erstellt einen Chatbot oder einen Konversationsbot. Sie verwenden es, um einfache und automatisierte Aufgaben auszuführen, z. B. die Bereitstellung von Kundendienst. Ein Bot kommuniziert mit einem Webdienst und hilft Ihnen bei der Verwendung seiner Angebote. Sie können Wettervorhersagen erhalten, Reservierungen vornehmen oder andere Dienste, die mithilfe eines Konversationsbots angeboten werden.\n\n:::image type=\"content\" source=\"~/assets/images/teams-toolkit-v2/first-bot/your-helloworld-app-bot.png\" alt-text=\"Diagramm, das zeigt, dass diese App drei Features aufweist. Bot ist hervorgehoben.\":::\n\nDa Sie sich bereits auf die Erstellung dieser Apps vorbereitet haben, können Sie ein neues Teams-Projekt zum Erstellen der Bot-App einrichten.\n\nIn diesem Tutorial erfahren Sie Folgendes:\n\n1. [Einrichten eines neuen Botprojekts mit dem Teams-Toolkit.](#create-your-bot-project-workspace)\n1. [Informationen zur Verzeichnisstruktur Ihres App-Projekts.](#take-a-tour-of-the-bot-app-source-code)\n\n> [!IMPORTANT]\n> Derzeit sind Bots in Government Community Cloud (GCC) verfügbar, aber nicht in GCC-High und Department of Defense (DOD).\n\n## <a name=\"create-your-bot-project-workspace\"></a>Erstellen Ihres Arbeitsbereichs für bot-Projekte\n\nWenn die Voraussetzungen erfüllt sind, fangen wir an!\n\n> [!NOTE]\n> Die angezeigte Visual Studio Code-Benutzeroberfläche stammt von Mac. Dies kann je nach Betriebssystem, Teams Toolkit-Version und Umgebung variieren.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/vscode)\n\n1. Öffnen Sie Visual Studio Code.\n1. Wählen Sie das Teams-Toolkit-Symbol :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: in der Visual Studio Code-Randleiste aus.\n\n1. Wählen Sie **Neue Microsoft Teams-App erstellen** aus.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-project.png\" alt-text=\"Ort des Links „Neues Projekt erstellen“ in der Randleiste des Microsoft Teams-Toolkits.\":::\n\n1. Wählen **Sie Neue Teams-App erstellen** aus, um eine App mit dem Teams Toolkit zu erstellen.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/create-new-app1.png\" alt-text=\"Starten des Assistenten für „Neues Projekt erstellen“\":::\n\n1. Stellen Sie sicher, dass **Bot** als die Funktion ausgewählt ist, die Sie in Ihrer App erstellen möchten.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-bot.png\" alt-text=\"Screenshot, der zeigt, wie Ihrer neuen App Funktionen hinzufügt werden können.\":::\n\n1. Wählen Sie **JavaScript** als Programmiersprache aus.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-language-tab.png\" alt-text=\"Screenshot, der zeigt, wie die Programmiersprache ausgewählt wird.\":::\n\n1. Wählen Sie **Standardordner** aus, um ihren Projektstammordner am Standardspeicherort zu speichern.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-default-location.png\" alt-text=\"Wählen Sie den Standardspeicherort aus.\":::\n\n   Sie können den Standardspeicherort auch mithilfe der folgenden Schritte ändern:\n\n   1. Wählen Sie **Durchsuchen** aus.\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/select-browse.png\" alt-text=\"Wählen Sie Speicherort durchsuchen aus.\":::\n\n   1. Wählen Sie den Speicherort für den Projektarbeitsbereich aus.\n   1. Wählen Sie ordner **auswählen** aus.\n\n       :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/select-folder.png\" alt-text=\"Screenshot, der zeigt, wie die Programmiersprache ausgewählt wird.\":::\n\n1. Geben Sie einen passenden Namen für Ihre App ein, wie z. B. `hellobot`. Stellen Sie sicher, dass der Name Ihrer App alphanumerisch ist. Drücken Sie die **EINGABETASTE**.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/hello-bot.png\" alt-text=\"Screenshot: Eingabe des App-Namens\":::\n\n    Es wird ein Dialogfeld angezeigt, in dem Sie ja oder nein auswählen müssen, um den Autoren der Dateien in diesem Ordner zu vertrauen.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/vsc-trust-authors.png\" alt-text=\"Dieser Screenshot ist ein Beispiel für das Dialogfeld, in dem die Autoren der Dateien in diesem Ordner als vertrauenswürdig eingestuft werden sollen. \":::\n\n1. Standardmäßig wird das Projekt innerhalb von 10 Sekunden im neuen Fenster geöffnet. Wenn Sie im aktuellen Fenster öffnen möchten, wählen Sie **Im aktuellen Fenster öffnen** aus.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/new-window-notification.png\" alt-text=\"Popupfenster &quot;Neues Fenster&quot;\":::\n\n    Ihre Teams-App mit einer Botfunktion wird in wenigen Sekunden erstellt.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-created-bot.png\" alt-text=\"Screenshot: Erstellte App\":::\n\n    Nachdem Ihre App erstellt wurde, zeigt das Teams-Toolkit die folgende Meldung an:\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/preview-project.png\" alt-text=\"Standortmeldung\":::\n    \n    Wählen Sie **Lokales Debuggen** aus, um eine Vorschau Ihres Projekts anzuzeigen.\n    \n<details>\n<summary>Eine kurze Zusammenfassung der Erstellung einer Teams-App.</summary>\nSehen Sie sich diese kurze Zusammenfassung zum Erstellen einer Teams-App an.\n\n![Erstellen einer Teams-App](~/assets/videos/javascript-bot-app1.gif)\n</details>\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cli)\n\nVerwenden Sie die `teamsfx`-CLI zum Erstellen Ihres ersten Projekts.  Beginnen Sie in dem Ordner, in dem Sie den Projektordner erstellen möchten.\n\n``` bash\nteamsfx new\n```\n\nSie können die CLI verwenden, um eine neue Teams-App zu erstellen. Die CLI führt Sie durch eine Reihe von Fragen. Jede Frage enthält eine Anweisung zur Beantwortung.\n\nVerwenden Sie beispielsweise Pfeiltasten, um eine Option auszuwählen. Nachdem Sie die Auswahl getroffen haben, drücken **Sie die EINGABETASTE** , um dies zu bestätigen.\n\n1. Wählen Sie **Neue Microsoft Teams-App erstellen** aus.\n1. Wählen Sie **Bot** aus, und deaktivieren Sie **die Tabulatortaste**.\n1. Wählen Sie **JavaScript** als Programmiersprache aus.\n1. Drücken Sie **die EINGABETASTE** , um den Standardarbeitsbereichsordner auszuwählen.\n1. Geben Sie einen passenden Namen für Ihre App ein, wie z. B. `HelloBot`. Der Name der App darf nur aus alphanumerischen Zeichen bestehen.\n\nNachdem Sie alle Fragen beantwortet haben, wird Ihr Projekt erstellt.\n\n---\n\n## <a name=\"take-a-tour-of-the-bot-app-source-code\"></a>Machen Sie einen Überblick über den Quellcode der Bot-App\n\nNachdem das Gerüst erstellt wurde, zeigen Sie die Projektverzeichnisse und -dateien im Explorer-Bereich von Visual Studio Code an.\n\n:::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/folder-structure-bot-app.png\" alt-text=\"Ordnerstruktur.\":::\n\n| Ordnername | Inhalt |\n| --- | --- |\n| `.fx/configs` | Konfigurationsdateien, die der Benutzer für die Teams-App anpassen kann. |\n| `.fx/configs/config.<envName>.json` | Konfigurationsdatei für jede Umgebung. |\n| `.fx/configs/azure.parameters.<envName>.json` | Parameterdatei für die Azure BICEP-Bereitstellung für jede Umgebung. |\n| `.fx/configs/projectSettings.json` | Globale Projekteinstellungen, die für alle Umgebungen gelten. |\n| `.fx/configs/ngrok.yml` | Ngrok-Einstellungen|\n| `bot` |  Code für die zur Laufzeit erforderliche Botfunktion. |\n| `bot/teamsBot.js` | Haupteinstiegspunkt für die Bot-App. |\n| `templates/appPackage` | App-Manifestvorlagendateien und die App-Symbole, color.png und outline.png. |\n| `templates/appPackage/manifest.template.json` | App-Manifest zum Ausführen der App in einer lokalen und Remoteumgebung.  |\n| `templates/azure` | BICEP-Vorlagendateien |\n\n> [!Tip]\n> Machen Sie sich mit Bots außerhalb von Teams vertraut, bevor Sie Ihren ersten Bot in Teams integrieren.\n"
- title: Erstellen und Ausführen Ihrer ersten Bot-App
  durationInMinutes: 1
  content: "\nNachdem Sie Ihren Projektarbeitsbereich mit Teams Toolkit eingerichtet haben, erstellen Sie Ihr Botprojekt. Stellen Sie sicher, dass Sie sich bei Ihrem Microsoft 365-Konto angemeldet haben.\n\n## <a name=\"sign-in-to-your-microsoft-365-account\"></a>Anmelden bei Ihrem Microsoft 365-Konto\n\nVerwenden Sie dieses Konto, um sich bei Teams anzumelden. Wenn Sie einen Microsoft 365-Entwicklerprogrammmandanten verwenden, ist das Administratorkonto, das Sie bei der Registrierung eingerichtet haben, Ihr Microsoft 365-Konto.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Öffnen Sie Visual Studio Code.\n1. Wählen Sie auf der Randleiste das Symbol Teams Toolkit  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: aus.\n1. Wählen Sie **Bei M365 anmelden** aus.\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können.\n\n1. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Microsoft 365-Konto an.\n1. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden, und kehren Sie zu Visual Studio Code zurück.\n1. Kehren Sie zu Teams Toolkit in Visual Studio Code zurück.\n\n    Verwenden Sie dieses Konto, um sich bei Teams anzumelden. Wenn Sie einen Microsoft 365-Entwicklerprogrammmandanten verwenden, ist das Administratorkonto, das Sie bei der Registrierung eingerichtet haben, Ihr Microsoft 365-Konto.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-tab/m365-sideloading-enabled.png\" alt-text=\"Screenshot: Anmeldeort bei Microsoft 365 und Azure\":::\n\n    Jetzt können Sie die App erstellen und lokal ausführen!\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cline)\n\n1. Melden Sie sich mit der TeamsFx CLI bei Microsoft 365 an:\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n2. Melden Sie sich mit der TeamsFx CLI bei Azure an:\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n    Die Kontoanmeldungen werden von Visual Studio Code und der TeamsFx CLI gemeinsam genutzt.\n\n    Nachdem die Entwicklungsumgebung konfiguriert wurde, können Sie Ihre erste Teams-App erstellen, erstellen und bereitstellen.\n\n---\n\n## <a name=\"build-and-run-your-first-bot-app-locally\"></a>Lokales Erstellen und Ausführen Ihrer ersten Bot-App\n\nSo erstellen Sie Ihre App und führen sie in der lokalen Umgebung aus:\n\n1. Wählen Sie **F5** in Visual Studio Code aus, um Ihre App im Debugmodus auszuführen.\n\n    > [!NOTE]\n    > Wenn das Teams-Toolkit eine bestimmte Voraussetzung nicht überprüfen kann, werden Sie aufgefordert, sie zu überprüfen.\n\n    <!-- markdownlint-disable MD033 -->\n\n    <details>\n    <summary>Erfahren Sie, was geschieht, wenn Sie Ihre App lokal im Debugger ausführen.</summary>\n\n    Falls Sie sich fragen, wenn Sie die Taste **F5** drücken, wird das Teams-Toolkit:\n\n    1. Überprüft alle folgenden Voraussetzungen:\n      - Sie sind mit einem Microsoft 365-Konto angemeldet.\n      - Das Querladen ist für Ihr Microsoft 365-Konto aktiviert.\n      - Unterstützt, Node.js Version installiert ist.\n      - Ngrok ist installiert.\n      - Der für die Bot-App erforderliche Port ist verfügbar.\n      \n    2. Installieren Sie npm-Pakete.\n    3. Startet Ngrok, um einen HTTP-Tunnel zu erstellen.\n    4. Registriert die App in Azure AD und konfiguriert die App.\n    5. Registriert die Bot-App in Bot Framework und konfiguriert die Bot-App.\n    6. Registriert die App im Teams-Entwicklerportal und konfiguriert die App.\n    7. Startet die Bot-App.\n    8. Startet Teams in einem Webbrowser und führt das Querladen der Bot-App durch.\n\n\n    </details>\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/f5-build-and-run.png\" alt-text=\"Screenshot: Drücken der Taste F5 zum Debuggen\":::\n\n    > [!NOTE]\n    > Wenn Sie die App zum ersten Mal ausführen, werden alle Abhängigkeiten heruntergeladen, und die App wird erstellt. Wenn die Erstellung abgeschlossen ist, wird automatisch ein Browserfenster geöffnet. Dieser Vorgang kann drei bis fünf Minuten dauern.\n\n    Teams führt Ihre App in einem Webbrowser aus.\n\n1. Melden Sie sich mit Ihrem Microsoft 365-Konto an, wenn Sie dazu aufgefordert werden.\n\n1. Wählen Sie **Hinzufügen** aus, wenn Sie aufgefordert werden, die App auf Teams auf Ihrem lokalen Computer querzuladen.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/add-bot-app-local-debug.png\" alt-text=\"Screenshot, der zeigt, dass der Bot auf dem Teams-Client hinzugefügt wird.\":::\n\n    Jetzt wird der Bot erfolgreich in Teams ausgeführt! Nachdem die App geladen wurde, wird eine Chatsitzung mit dem Bot geöffnet.\n\n    :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/app-added-bot-local-debug.png\" alt-text=\"Screenshot: Der Bot wird auf dem Teams-Client ausgeführt.\":::\n\n    Sie können eingeben `welcome` , um eine Einführungskarte anzuzeigen, und eingeben `learn` , um zur Dokumentation für adaptive Karten und Botbefehle zu wechseln.\n\n     :::image type=\"content\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/first-bot/bot-app-learn-local-debug.png\" alt-text=\"Screenshot: Learn-Karte im Bot auf dem Teams-Client\":::       \n\n    Sie können normale Debugaktivitäten ausführen, z. B. das Festlegen von Haltepunkten, wie bei jeder anderen Webanwendung. Öffnen Sie die Datei `bot/teamsBot.js`, und suchen Sie die `onMessage()`-Methode. Legen Sie in jedem Fall einen Haltepunkt fest. Geben Sie dann Text ein.\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Erfahren Sie, wie Sie Probleme beheben, wenn Ihre App nicht lokal ausgeführt wird.</summary>\n\n  Um Ihre App in Teams erfolgreich auszuführen, stellen Sie sicher, dass Sie das Querladen in Ihrem Teams-Konto aktiviert haben. Weitere Informationen zum Querladen finden Sie im Abschnitt Voraussetzungen.\n\n  > [!IMPORTANT]\n  > Derzeit sind Querladen-Apps in Government Community Cloud (GCC), GCC-High und DOD verfügbar.\n\n  > [!TIP]\n  > Überprüfen Sie vor dem Querladen Ihrer App mithilfe des [App-Validierungstools](https://dev.teams.microsoft.com/appvalidation.html) auf Probleme. Dieses Tool ist im Toolkit enthalten. Beheben Sie die Fehler beim Querladen der App.\n  </details> \n"
- title: Bereitstellen Ihrer ersten Teams-App
  durationInMinutes: 1
  content: "\nSie haben gelernt, eine Teams-App mit Bot-Funktion zu erstellen, zu erstellen und auszuführen. Der letzte Schritt besteht darin, Ihre App in Azure bereitzustellen.\n\nWir stellen die erste App mit Botfunktion in Azure mithilfe des Teams-Toolkits bereit.\n\n## <a name=\"sign-in-to-your-azure-account\"></a>Anmelden bei Ihrem Azure-Konto\n\nVerwenden Sie dieses Konto, um auf die Microsoft Azure-Portal zuzugreifen und neue Cloudressourcen zur Unterstützung Ihrer App bereitzustellen.\n\n# <a name=\"visual-studio-code\"></a>[Visual Studio Code](#tab/viscode)\n\n1. Öffnen Sie Visual Studio Code.\n1. Öffnen Sie den Projektordner, in dem Sie die Registerkarten-App erstellt haben.\n1. Wählen Sie auf der Randleiste das Symbol Teams Toolkit  :::image type=\"icon\" source=\"../msteams-platform/assets/images/teams-toolkit-v2/teams-toolkit-sidebar-icon.png\"::: aus.\n1. Wählen Sie **Bei Azure anmelden** aus.\n\n    > [!TIP]\n    > Wenn Sie die Azure-Kontoerweiterung installiert haben und dasselbe Konto verwenden, können Sie diesen Schritt überspringen. Verwenden Sie dasselbe Konto wie in anderen Erweiterungen.\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können.\n1. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an.\n1. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden, und kehren Sie zu Visual Studio Code zurück.\n\n    Im Abschnitt **KONTEN** der Randleiste werden die beiden Konten separat angezeigt. Außerdem wird die Anzahl der verwendbaren Azure-Abonnements aufgelistet, die Ihnen zur Verfügung stehen. Stellen Sie sicher, dass Mindestens ein verwendbares Azure-Abonnement verfügbar ist. Wenn nicht, melden Sie sich ab, und verwenden Sie ein anderes Konto.\n\n    Jetzt können Sie Ihre App in Azure bereitstellen!\n\n    Herzlichen Glückwunsch, Sie haben eine Teams-App erstellt! \n    Als Nächstes erfahren Sie, wie Sie mithilfe des Teams-Toolkits eine der Apps in Azure bereitstellen.\n\n# <a name=\"command-line\"></a>[Befehlszeile](#tab/cline)\n\n1. Melden Sie sich mit der TeamsFx CLI bei Microsoft 365 an:\n\n    ``` bash\n    teamsfx account login m365\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n2. Melden Sie sich mit der TeamsFx CLI bei Azure an:\n\n    ``` bash\n    teamsfx account login azure\n    ```\n\n    Ihr Standardwebbrowser wird geöffnet, damit Sie sich beim Konto anmelden können. Melden Sie sich mit Ihren Anmeldeinformationen bei Ihrem Azure-Konto an. Schließen Sie den Browser, wenn Sie dazu aufgefordert werden.\n\n    Die Kontoanmeldungen werden von Visual Studio Code und der TeamsFx CLI gemeinsam genutzt.\n\n    Herzlichen Glückwunsch, Sie haben eine Teams-App erstellt! \n    Als Nächstes erfahren Sie, wie Sie mithilfe des Teams-Toolkits eine der Apps in Azure bereitstellen.\n\n---\n\n  [!INCLUDE [Provision and Deploy your app on Azure](~/includes/get-started/azure-provisioning-instructions.md)]\n\n  <!-- markdownlint-disable MD033 -->\n  <details>\n  <summary>Erfahren Sie, was geschieht, wenn Sie Ihre App in Azure bereitstellen</summary>\n\n  Vor der Bereitstellung wurde die Anwendung lokal ausgeführt:\n\n  * Das Back-End unter Verwendung von **Azure Functions Core Tools** ausgeführt.\n  * Der HTTP-Endpunkt der Anwendung, an dem Microsoft Teams die Anwendung lädt, wird lokal ausgeführt.\n\n  Die Bereitstellung ist ein zweistufiger Prozess. Sie stellen die Ressourcen in einem aktiven Azure-Abonnement bereit und stellen dann den Back-End- und Front-End-Code für die Anwendung in Azure bereit oder laden diesen hoch.\n\n  * Das Back-End verwendet, sofern konfiguriert, verschiedene Azure-Dienste, einschließlich Azure App Service und Azure Storage.\n  * Die Front-End-Anwendung wird in einem Azure Storage-Konto bereitgestellt, das für statisches Webhosting konfiguriert ist.\n\n  </details>\n"
- title: Herzlichen Glückwunsch!
  durationInMinutes: 1
  content: "\nSie haben es geschafft!\n\nSie haben eine Bot-App erstellt.\n\nNachdem Sie gelernt haben, eine einfache App zu erstellen, können Sie mit der Erstellung komplexerer Apps fortfahren. Versuchen Sie zunächst, Ihren vorhandenen Apps Funktionen hinzuzufügen.\n\nSo fügen Sie Ihrer vorhandenen App Funktionen hinzu:\n\n1. Wählen Sie auf der Randleiste des Teams-Toolkits im Abschnitt **Entwicklung** die Option **Features hinzufügen** aus.\n\n1. Wählen Sie die Funktion aus, die Sie Ihrer App hinzufügen möchten.\n\nDas ist alles. Das Teams-Toolkit fügt der Verzeichnisstruktur Ihrer App das Gerüst für die neue Funktion hinzu. Befolgen Sie die Verfahren zum Erstellen und Bereitstellen der App, und Ihre App verfügt über mehrere Funktionen. \n\nSie haben das Tutorial zum Erstellen eines Bots mit JavaScript abgeschlossen."
